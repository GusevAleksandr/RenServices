/**
 * rest сервисы ренессанс
 * rest сервисы ренессанс
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.AuthenticationRequest
import io.swagger.client.model.ChangePasswordAndAuthorizationRequest
import io.swagger.client.model.ChangePasswordRequest
import io.swagger.client.model.ResetPasswordRequest
import io.swagger.client.model.UserDetails
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AuthorizationApi {

  /**
   * сброс пароля авторизованного в системе пользователя
   * 
   * Expected answers:
   *   code 200 :  (если сброс пароля прошел успешно, возвращается ответ с 200м кодом)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 500 :  (Internal Server Error)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param body логин пользователя
   */
  def authorizationPasswordDelete(body: ResetPasswordRequest)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/auth/user/password", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](500)
        /**
   * получение информации о текущем пользователе
   * 
   * Expected answers:
   *   code 200 : UserDetails (если сброс пароля прошел успешно, возвращается ответ с 200м кодом)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 500 :  (Internal Server Error)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   */
  def authorizationPasswordDetails()(implicit apiKey: ApiKeyValue): ApiRequest[UserDetails] =
    ApiRequest[UserDetails](ApiMethods.GET, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/auth/user/details", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withSuccessResponse[UserDetails](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](500)
        /**
   * авторизация пользователя в системе и смена пароля
   * 
   * Expected answers:
   *   code 200 :  (если смена пароля прошла успешно, возвращается ответ с 200м кодом)
   *   code 400 :  (bad input parameter)
   *   code 500 :  (Internal Server Error)
   * 
   * @param body логин пользователя
   */
  def authorizationPasswordNew(body: ChangePasswordAndAuthorizationRequest): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/auth/user/authorization/password/new", "application/json")
      .withBody(body)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
        /**
   * смена пароля авторизованного в системе пользователя
   * 
   * Expected answers:
   *   code 200 :  (если смена пароля прошла успешно, возвращается ответ с 200м кодом)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 500 :  (Internal Server Error)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param body логин пользователя
   */
  def passwordNew(body: ChangePasswordRequest)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/auth/user/password/new", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](500)
        /**
   * авторизация зарегистрированного ранее пользователя в системе
   * 
   * Expected answers:
   *   code 200 : String (если авторизация прошла успешно, возвращается сформированый токен JWT)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 500 :  (Internal Server Error)
   * 
   * @param body логин пользователя
   */
  def userAuthorization(body: AuthenticationRequest): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/auth/authorization", "application/json")
      .withBody(body)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](500)
      

}

