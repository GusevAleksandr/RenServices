/**
 * rest сервисы УФОС
 * rest сервисы ядра УФОС
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.DocListRequest
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DocListApi {

  /**
   * получение списка документов переданного типа с ранее переданными параметрами фильтрации
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (массив доступных пользователю документов. Если заданы поля, необходимые для загрузки, или флаг onlyHeaderFields не выставлен в значение false возвращается массив объектов в виде пар ключ&#x3D;значение. Если параметр onlyHeaderFields выставлен в значение false, возвращается полное JSON представление документа на основе дескриптора mapping.)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 404 :  (запрос с переданным идентификатором не найден)
   *   code 500 :  (Internal Server Error)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param id идентификатор сохраненных параметров запроса не сервере приложений, возвращенных ранее при вызове метода post
   * @param page номер требуемой страницы. Нумерация начинается с 1. Если параметр не задан, используется значение по умолчанию, равное 1.
   * @param pageSize количество элементов на странице. Если не задан - используется значиние по умолчанию, равное 20.
   */
  def getDocList(id: String, page: Option[Int] = None, pageSize: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/core/v1/docs/list/{id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("id", id)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * сохраниение параметров запроса на сервере приложений, для последующего использования в get запросе. Все наименования полей документа имеют идентификаторы в соответсвтвии с дескриптором mapping.
   * 
   * Expected answers:
   *   code 200 : String (в качестве ответа возвращается уникальный идентификатор запроса по переданным параметрам, который в последствии должен быть передан через запрос get)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 500 :  (Internal Server Error)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param postBody параметры запроса
   * @param id идентификатор типа документа, который является уникальным идентификатором (nodeId) из навигации
   */
  def postDocList(postBody: DocListRequest, id: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/core/v1/docs/list/{id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(postBody)
      .withPathParam("id", id)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](500)
        /**
   * получение списка документов переданного типа с поддержкой простой фильтрации и сортировки. Возможно указание необходимых полей загрузки. Все наименования полей документа имеют идентификаторы в соответсвтвии с дескриптором mapping.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (массив доступных пользователю документов. Если заданы поля, необходимые для загрузки, или флаг onlyHeaderFields не выставлен в значение false возвращается массив объектов в виде пар ключ&#x3D;значение. Если параметр onlyHeaderFields выставлен в значение false, возвращается полное JSON представление документа на основе дескриптора mapping.)
   *   code 400 :  (bad input parameter)
   *   code 401 :  (Unauthorized)
   *   code 500 :  (Internal Server Error)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param typeId идентификатор типа документа, который является уникальным идентификатором (nodeId) из навигации
   * @param navigationId идентификатор файла навигации. Используется в случае наличия нескольких навигаций
   * @param filter дополнительные условия фильтрации в формате простых запросов. Используются логические выражения (&#x3D;, !&#x3D;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;), операции коньюнкции (AND), коньюнкции (OR), отрицания (NOT) ключевые слова like
   * @param filterId идентификатор именованного фильтра. Возможна передача значений для параметров фильтрации. Значения передаются в строке запроса в виде ключ&#x3D;значение.
   * @param fields список возвращаемых полей. Если параметр не задан, и установлен флаг onlyHeaderFields, выгружаются только заголовочные поля, без вложенных таблиц.
   * @param onlyHeaderFields флаг, указывающий необходимость загрузки только заголовочных полей документа. Является необязательным, значение по умолчанию - true.
   * @param ordersAsc список полей для сортировки по возрастанию
   * @param ordersDesc список полей для сортировки по убыванию
   * @param page номер требуемой страницы. Нумерация начинается с 1. Если параметр не задан, используется значение по умолчанию, равное 1.
   * @param pageSize количество элементов на странице. Если не задан - используется значиние по умолчанию, равное 20.
   */
  def simpleDocList(typeId: String, navigationId: Option[String] = None, filter: Option[String] = None, filterId: Option[String] = None, fields: Seq[String], onlyHeaderFields: Option[Boolean] = None, ordersAsc: Seq[String], ordersDesc: Seq[String], page: Option[Int] = None, pageSize: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, "https://virtserver.swaggerhub.com/renessansBankService/restServices/1.0.0", "/rest-api/core/v1/docs/simple/list/{typeId}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("navigationId", navigationId)
      .withQueryParam("filter", filter)
      .withQueryParam("filterId", filterId)
      .withQueryParam("fields", ArrayValues(fields, MULTI))
      .withQueryParam("onlyHeaderFields", onlyHeaderFields)
      .withQueryParam("ordersAsc", ArrayValues(ordersAsc, MULTI))
      .withQueryParam("ordersDesc", ArrayValues(ordersDesc, MULTI))
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("typeId", typeId)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](500)
      

}

