/**
 * rest сервисы ренессанс
 * rest сервисы ренессанс
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model._
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(AgentSchemeEnums.State) :+
    new EnumNameSerializer(ContractBasicDocDopEnums.Value) :+
    new EnumNameSerializer(ContractDocTypeEnums.Value) :+
    new EnumNameSerializer(ContractHowFillDateEnums.Value) :+
    new EnumNameSerializer(ContractIspepEnums.Value) :+
    new EnumNameSerializer(ContractPartiesAgreedEnums.Value) :+
    new EnumNameSerializer(ContractPartnerTypeEnums.Value) :+
    new EnumNameSerializer(ContractRegInfoTTModeEnums.Value) :+
    new EnumNameSerializer(ContractSubjectEnums.Value) :+
    new EnumNameSerializer(ContractTtModeEnums.Value) :+
    new EnumNameSerializer(ContractUnitEnums.Value) :+
    new EnumNameSerializer(EmployeeAuthorityEnums.State) :+
    new EnumNameSerializer(LoanProductEnums.State) :+
    new EnumNameSerializer(LoanProductAgreementRoleEnums.Value) :+
    new EnumNameSerializer(LoanProductGroupProductEnums.Value) :+
    new EnumNameSerializer(PartnerEmployeeEnums.State) :+
    new EnumNameSerializer(PartnerPartnerTypeEnums.Value) :+
    new EnumNameSerializer(PartnerUnitEnums.Value) :+
    new EnumNameSerializer(RewardBasicInfoPDSubjectEnums.Value) :+
    new EnumNameSerializer(TradingPointAddInfoReceiveCanalEnums.Value) :+
    new EnumNameSerializer(TradingPointAddInfoSendCanalEnums.Value) :+
    new EnumNameSerializer(TradingPointAgreementRoleEnums.Value) :+
    new EnumNameSerializer(TradingPointInteractionSchemeBusinessGroupEnums.Value) :+
    new EnumNameSerializer(TradingPointInteractionSchemeTTModeEnums.Value) :+
    new EnumNameSerializer(TradingPointPurposeEnums.Value) :+
    new EnumNameSerializer(UserTmStateEnums.Value) :+
    new EnumNameSerializer(UserTmTypeEnums.Value)

  private class EnumNameSerializer[E <: Enumeration: ClassTag](enum: E)
    extends Serializer[E#Value] {
    import JsonDSL._

    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats):
    PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t @ TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            enum.withName(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
    }
  }

}
